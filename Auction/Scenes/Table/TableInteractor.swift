//
//  TableInteractor.swift
//  Auction
//
//  Created by Raymond Law on 1/20/18.
//  Copyright (c) 2018 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol TableBusinessLogic
{
  var displayable: Table.Displayable { get }
  func fetchObjects(request: Table.FetchObjects.Request)
}

protocol TableDataStore
{
}

class TableInteractor: TableBusinessLogic, TableDataStore, RealmWorkerDelegate
{
  var presenter: TablePresentationLogic?
  var worker: TableWorker?
  
  // MARK: Fetch objects
  
  var displayable: Table.Displayable = .items
  var objects: Results<Object>?
  
  func fetchObjects(request: Table.FetchObjects.Request)
  {
    objects = nil
    displayable = request.displayable
    RealmWorker.shared.addDelegate(delegate: self)
    refreshObjects()
  }
  
  // MARK: Refresh objects
  
  private func refreshObjects()
  {
    switch displayable {
    case .items:
      refreshItems()
    case .buyers:
      refreshBuyers()
    case .sellers:
      refreshSellers()
    }
  }
  
  private func refreshItems()
  {
    if objects?.realm == nil {
      if RealmWorker.shared.realm != nil {
        objects = RealmWorker.shared.realm.objects(Item.self as Object.Type)
      }
    }
    let response = Table.FetchObjects.Response(objects: objects)
    presenter?.presentFetchedItems(response: response)
  }
  
  private func refreshBuyers()
  {
    if objects?.realm == nil {
      if RealmWorker.shared.realm != nil {
        objects = RealmWorker.shared.realm.objects(User.self as Object.Type)
      }
    }
    let response = Table.FetchObjects.Response(objects: objects)
    presenter?.presentFetchedBuyers(response: response)
  }
  
  private func refreshSellers()
  {
    if objects?.realm == nil {
      if RealmWorker.shared.realm != nil {
        objects = RealmWorker.shared.realm.objects(User.self as Object.Type).filter("soldItems.@count > 0")
      }
    }
    let response = Table.FetchObjects.Response(objects: objects)
    presenter?.presentFetchedSellers(response: response)
  }
  
  // MARK: RealmWorkerDelegate
  
  func realmWorkerHasChanged()
  {
    refreshObjects()
  }
}
