//
//  TablePresenter.swift
//  Auction
//
//  Created by Raymond Law on 1/20/18.
//  Copyright (c) 2018 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol TablePresentationLogic
{
  func presentFetchedItems(response: Table.FetchObjects.Response)
  func presentFetchedBuyers(response: Table.FetchObjects.Response)
  func presentFetchedSellers(response: Table.FetchObjects.Response)
}

class TablePresenter: TablePresentationLogic
{
  weak var viewController: TableDisplayLogic?
  
  lazy var currencyFormatter: NumberFormatter = {
    let formatter = NumberFormatter()
    formatter.numberStyle = .currency
    return formatter
  }()
  
  // MARK: Format items
  
  func presentFetchedItems(response: Table.FetchObjects.Response)
  {
    if let objects = response.objects {
      let displayedObjects = Array(objects).map { (object) -> DisplayedObject in
        let item = object as! Item
        return formatItem(item: item)
      }
      let viewModel = Table.FetchObjects.ViewModel(displayedObjects: displayedObjects)
      viewController?.displayFetchedObjects(viewModel: viewModel)
    }
  }
  
  private func formatItem(item: Item) -> Table.FetchObjects.ViewModel.DisplayedItem
  {
    let quantity = String(item.quantity)
    let price = currencyFormatter.string(from: NSNumber(value: item.price))!
    return Table.FetchObjects.ViewModel.DisplayedItem(name: item.name, quantity: quantity, price: price)
  }
  
  // MARK: Format buyers
  
  func presentFetchedBuyers(response: Table.FetchObjects.Response)
  {
    if let objects = response.objects {
      let displayedObjects = Array(objects).map { (object) -> DisplayedObject in
        let buyer = object as! User
        return formatBuyer(buyer: buyer)
      }
      let viewModel = Table.FetchObjects.ViewModel(displayedObjects: displayedObjects)
      viewController?.displayFetchedObjects(viewModel: viewModel)
    }
  }
  
  private func formatBuyer(buyer: User) -> Table.FetchObjects.ViewModel.DisplayedBuyer
  {
    return Table.FetchObjects.ViewModel.DisplayedBuyer(name: "\(buyer.name) - Buyer", email: buyer.email)
  }
  
  // MARK: Format sellers
  
  func presentFetchedSellers(response: Table.FetchObjects.Response)
  {
    if let objects = response.objects {
      let displayedObjects = Array(objects).map { (object) -> DisplayedObject in
        let seller = object as! User
        return formatSeller(seller: seller)
      }
      let viewModel = Table.FetchObjects.ViewModel(displayedObjects: displayedObjects)
      viewController?.displayFetchedObjects(viewModel: viewModel)
    }
  }
  
  private func formatSeller(seller: User) -> Table.FetchObjects.ViewModel.DisplayedSeller
  {
    return Table.FetchObjects.ViewModel.DisplayedSeller(name: "\(seller.name) - Seller", email: seller.email)
  }
}
